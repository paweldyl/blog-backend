// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type LikeValue string

const (
	LikeValueLike    LikeValue = "like"
	LikeValueDislike LikeValue = "dislike"
)

func (e *LikeValue) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LikeValue(s)
	case string:
		*e = LikeValue(s)
	default:
		return fmt.Errorf("unsupported scan type for LikeValue: %T", src)
	}
	return nil
}

type NullLikeValue struct {
	LikeValue LikeValue `json:"like_value"`
	Valid     bool      `json:"valid"` // Valid is true if LikeValue is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLikeValue) Scan(value interface{}) error {
	if value == nil {
		ns.LikeValue, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LikeValue.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLikeValue) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LikeValue), nil
}

type Comment struct {
	ID          uuid.UUID `json:"id"`
	Text        string    `json:"text"`
	AuthorLogin string    `json:"author_login"`
	PostID      uuid.UUID `json:"post_id"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedAt   time.Time `json:"created_at"`
}

type Post struct {
	ID             uuid.UUID `json:"id"`
	Title          string    `json:"title"`
	ShortDesc      string    `json:"short_desc"`
	Description    string    `json:"description"`
	AuthorLogin    string    `json:"author_login"`
	LikesAmount    int32     `json:"likes_amount"`
	DislikesAmount int32     `json:"dislikes_amount"`
	UpdatedAt      time.Time `json:"updated_at"`
	CreatedAt      time.Time `json:"created_at"`
}

type PostsLike struct {
	UserLogin string    `json:"user_login"`
	PostID    uuid.UUID `json:"post_id"`
	Value     LikeValue `json:"value"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Login        string    `json:"login"`
	RefreshToken string    `json:"refresh_token"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type User struct {
	Login          string    `json:"login"`
	HashedPassword string    `json:"hashed_password"`
	Username       string    `json:"username"`
	UpdatedAt      time.Time `json:"updated_at"`
	CreatedAt      time.Time `json:"created_at"`
}
