// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: comment/rpc_update_comment.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateCommentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommentId     string                 `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Text          string                 `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCommentRequest) Reset() {
	*x = UpdateCommentRequest{}
	mi := &file_comment_rpc_update_comment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentRequest) ProtoMessage() {}

func (x *UpdateCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_rpc_update_comment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) {
	return file_comment_rpc_update_comment_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateCommentRequest) GetCommentId() string {
	if x != nil {
		return x.CommentId
	}
	return ""
}

func (x *UpdateCommentRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type UpdateCommentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comment       *Comment               `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCommentResponse) Reset() {
	*x = UpdateCommentResponse{}
	mi := &file_comment_rpc_update_comment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentResponse) ProtoMessage() {}

func (x *UpdateCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comment_rpc_update_comment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentResponse.ProtoReflect.Descriptor instead.
func (*UpdateCommentResponse) Descriptor() ([]byte, []int) {
	return file_comment_rpc_update_comment_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCommentResponse) GetComment() *Comment {
	if x != nil {
		return x.Comment
	}
	return nil
}

var File_comment_rpc_update_comment_proto protoreflect.FileDescriptor

const file_comment_rpc_update_comment_proto_rawDesc = "" +
	"\n" +
	" comment/rpc_update_comment.proto\x12\x02pb\x1a\x15comment/comment.proto\"I\n" +
	"\x14UpdateCommentRequest\x12\x1d\n" +
	"\n" +
	"comment_id\x18\x01 \x01(\tR\tcommentId\x12\x12\n" +
	"\x04text\x18\x02 \x01(\tR\x04text\">\n" +
	"\x15UpdateCommentResponse\x12%\n" +
	"\acomment\x18\x01 \x01(\v2\v.pb.CommentR\acommentB%Z#github.com/paweldyl/blog-backend/pbb\x06proto3"

var (
	file_comment_rpc_update_comment_proto_rawDescOnce sync.Once
	file_comment_rpc_update_comment_proto_rawDescData []byte
)

func file_comment_rpc_update_comment_proto_rawDescGZIP() []byte {
	file_comment_rpc_update_comment_proto_rawDescOnce.Do(func() {
		file_comment_rpc_update_comment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_comment_rpc_update_comment_proto_rawDesc), len(file_comment_rpc_update_comment_proto_rawDesc)))
	})
	return file_comment_rpc_update_comment_proto_rawDescData
}

var file_comment_rpc_update_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_comment_rpc_update_comment_proto_goTypes = []any{
	(*UpdateCommentRequest)(nil),  // 0: pb.UpdateCommentRequest
	(*UpdateCommentResponse)(nil), // 1: pb.UpdateCommentResponse
	(*Comment)(nil),               // 2: pb.Comment
}
var file_comment_rpc_update_comment_proto_depIdxs = []int32{
	2, // 0: pb.UpdateCommentResponse.comment:type_name -> pb.Comment
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_comment_rpc_update_comment_proto_init() }
func file_comment_rpc_update_comment_proto_init() {
	if File_comment_rpc_update_comment_proto != nil {
		return
	}
	file_comment_comment_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_comment_rpc_update_comment_proto_rawDesc), len(file_comment_rpc_update_comment_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_comment_rpc_update_comment_proto_goTypes,
		DependencyIndexes: file_comment_rpc_update_comment_proto_depIdxs,
		MessageInfos:      file_comment_rpc_update_comment_proto_msgTypes,
	}.Build()
	File_comment_rpc_update_comment_proto = out.File
	file_comment_rpc_update_comment_proto_goTypes = nil
	file_comment_rpc_update_comment_proto_depIdxs = nil
}
